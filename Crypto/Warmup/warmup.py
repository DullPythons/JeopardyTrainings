from Crypto.Util.number import inverse
import gmpy2
import codecs
c_square = 41027546415588921135190519817388916847442693284567375482282571314638757544938653824671437300971782426302443281077457253827782026089649732942648771306702020
A=1780602199528179468577178612383888301611753776788787799581979768613992169436352468580888042155360498830144442282937213247708372597613226926855391934953064

p = int(gmpy2.isqrt(c_square + 4*A) // 2)
q = int(gmpy2.isqrt(p**2 - 2 * A))
print("p: {}".format(p))
print("q: {}".format(q))


n = p * q
e=0x10001
enc=825531027337680366509171870396193970230179478931882005355846498785843598000659828635030935743236266080589740863128695174980645084614454653557872620514117

phi = (p -1) * (q - 1)
d = inverse(e, phi)

m = pow(enc, d, n)
m = hex(m)
decode_hex = codecs.getdecoder("hex_codec")
string = decode_hex(m[2:])
print(string)